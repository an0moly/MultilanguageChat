@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="row">
    <div class="form-group col-lg-12">
        <div class="input-group input-group-lg">
            <span class="input-group-addon" id="sizing-addon1">@@</span>
            <input type="text" id="name" class="form-control" placeholder="Username" aria-describedby="sizing-addon1">
        </div>
    </div>
</div>

<div class="row">
    <div class="form-group">
        <div class="col-md-10 col-sm-9 col-xs-10 input-group-lg">
            <input type="text" id="message" class="form-control" placeholder="Message" aria-describedby="sizing-addon1">
        </div>
        <div class="col-md-2 col-sm-3 col-xs-2">
            <button type="button" id="send" class="btn btn-default btn-lg" style="width: 100%">Send</button>
        </div>
    </div>
</div>

<div class="row input-lg">
    <ul class="list-group" id="discussion"></ul>
</div>

@section Scripts
    {
    <!--Reference the SignalR library. -->
    <script type="text/javascript" src="~/lib/signalr/dist/browser/signalr.min.js"></script>

    <script type="text/javascript">
        function bindConnectionMessage(connection) {
            var messageCallback = function (message) {
                if (!message) return;

                var lang = getParameterByName('lang');
                fetch('@Url.Action("Translate", "Translator")?text=' + htmlEncode(message.text) + "&src=" + message.language + "&dst=" + lang)
                    .then(
                        function (response) {
                            if (response.status !== 200) {
                                console.log('Looks like there was a problem. Status Code: ' + response.status);
                                return;
                            }

                            // Examine the text in the response
                            response.json().then(function (data) {
                                console.log(data);

                                // Html encode display name and message.
                                appendMessage(message.sender, data.translatedText, false);

                                var messageBox = $('discussion');
                                messageBox.scrollTop = messageBox.scrollHeight;

                            });
                        }
                    )
                    .catch(function (err) {
                        alert(err);
                        console.log('Fetch Error: ', err);
                    });
            };

            // Create a function that the hub can call to broadcast messages.
            connection.on('sendMessage', messageCallback);
            connection.onclose(onConnectionError);
        }

        function onConnected(connection) {
            console.log('connection started');

            $("#send").click(function (e) {
                var sender = $("#name").val();
                var message = $("#message").val();
                var lang = getParameterByName('lang');

                if (message != '') {
                    connection.send('sendMessage', { sender: sender, text: message, language: lang });

                    appendMessage(sender, message, true);
                    $("#message").val('');
                }
            });

            $('#message').keypress(function (e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    $("#send").click();
                    return false;
                }
            });
        }

        function onConnectionError(error) {
            if (error && error.message) {
                console.error(error.message);
            }
        }

        function appendMessage(sender, message, isMine) {
            $('#discussion').append('<li class="list-group-item"><strong>' + htmlEncode(sender)
                + '</strong>: ' + htmlEncode(message) + '</li>');
        }

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regexS = "[\\?&]" + name + "=([^&#]*)";
            var regex = new RegExp(regexS);
            var results = regex.exec(window.location.href);

            if (results == null)
                return "";
            else
                return decodeURIComponent(results[1].replace(/\+/g, " "));
        }

        var connection = new signalR.HubConnectionBuilder()
            .withUrl('/chat')
            .build();

        bindConnectionMessage(connection);
        connection.start()
            .then(function () {
                onConnected(connection);
            })
            .catch(function (error) {
                console.error(error.message);
            });
    </script>
}