@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="row">
    <div class="form-group col-lg-12">
        <div class="input-group input-group-lg">
            <span class="input-group-addon" id="sizing-addon1">@@</span>
            <input type="text" id="name" class="form-control" placeholder="Username" aria-describedby="sizing-addon1">
        </div>
    </div>
</div>

<div class="row">
    <div class="form-group">
        <div class="col-xs-9 input-group-lg">
            <input type="text" id="message" class="form-control" placeholder="Message" aria-describedby="sizing-addon1">
        </div>
        <div class="col-xs-3">
            <button type="button" id="send" class="btn btn-primary btn-lg pull-right">Send</button>
        </div>
    </div>
</div>

<div class="row input-lg">
    <ul class="list-group" id="discussion"></ul>
</div>

@section Scripts
    {
    <!--Reference the SignalR library. -->
    <script type="text/javascript" src="~/lib/signalr/dist/browser/signalr.min.js"></script>

    <script type="text/javascript">
        function bindConnectionMessage(connection) {
            var messageCallback = function (message) {
                if (!message) return;

                fetch('@Url.Action("Translate", "Translator")', {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ text: message.text, sourceLanguage: message.language, destinationLanguage: GetQueryStringParameter('lang') })
                })
                .then(
                    function (response) {
                        if (response.status !== 200) {
                            console.log('Looks like there was a problem. Status Code: ' + response.status);
                            return;
                        }

                        // Examine the text in the response
                        response.json().then(function (data) {
                            console.log(data);

                            // Html encode display name and message.
                            appendMessage(message.sender, data.translatedText, false);

                            var messageBox = $('discussion');
                            messageBox.scrollTop = messageBox.scrollHeight;
                        });
                    }
                )
                .catch(function (err) {
                    alert(err);
                    console.log('Fetch Error: ', err);
                });
            };

            // Create a function that the hub can call to broadcast messages.
            connection.on('sendMessage', messageCallback);
            connection.onclose(onConnectionError);
        }

        function onConnected(connection) {
            console.log('connection started');

            $("#send").click(function (e) {
                var sender = $("#name").val();
                var message = $("#message").val();
                var lang = GetQueryStringParameter('lang');

                if (message != '') {
                    connection.send('sendMessage', { sender: sender, text: message, language: lang });

                    appendMessage(sender, message, true);
                    $("#message").val('');
                }
            });

            $('#message').keypress(function (e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    $("#send").click();
                    return false;
                }
            });
        }

        function onConnectionError(error) {
            if (error && error.message) {
                console.error(error.message);
            }
        }

        function appendMessage(sender, message, isMine) {
            var rightClass = isMine ? "text-right" : "";
            $('#discussion').append('<li class="list-group-item ' + rightClass + '"><span><strong>' + htmlEncode(sender)
                + '</strong>: ' + htmlEncode(message) + '</span></li>');
        }

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        function GetQueryStringParameter(name) {
            const urlParams = new URLSearchParams(window.location.search);
            const param = urlParams.get(name);

            return param;
        }

        var connection = new signalR.HubConnectionBuilder()
            .withUrl('/chat')
            .build();

        bindConnectionMessage(connection);
        connection.start()
            .then(function () {
                onConnected(connection);
            })
            .catch(function (error) {
                console.error(error.message);
            });
    </script>
}